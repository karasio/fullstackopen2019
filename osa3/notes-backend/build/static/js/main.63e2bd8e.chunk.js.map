{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteservice","initialNotes","toggleImportanceOf","find","n","changeNote","returnedNote","map","catch","error","console","log","setTimeout","filter","notesToShow","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"yNAceA,EAZF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACI,wBAAIC,UAAY,QACbJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCK7BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIL,yBAAKJ,UAAU,SACZI,I,gBCgBM,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,UAIRC,EAAc,CAClBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEb,OAAOM,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAdR,SAcsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,SAmBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,8NCjB3C,IAAMK,EAAS,WAOb,OACI,yBAAKC,MAPW,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,uGAgGOC,EA3FH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,MAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAMrBC,qBAAU,WACRC,IAEKxB,MAAK,SAAAyB,GACJT,EAASS,QAEd,IAEH,IAKMC,EAAqB,SAAA5B,GACzB,IAAMb,EAAO8B,EAAMY,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChC+B,E,yVAAU,IAAQ5C,EAAR,CAAcG,WAAYH,EAAKG,YAE/CoC,EACY1B,EAAI+B,GAAY7B,MAAK,SAAA8B,GAC7Bd,EAASD,EAAMgB,KAAI,SAAA9C,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAO6C,SAElDE,OAAM,SAAAC,GACLC,QAAQC,IAAI,SAASF,GACrBX,EAAgB,SAAD,OACFrC,EAAKK,QADH,sCAGf8C,YAAW,WACTd,EAAgB,QACf,KACLN,EAASD,EAAMsB,QAAO,SAAAT,GAAC,OAAIA,EAAE9B,KAAOA,UAcpCwC,EAAcnB,EAAUJ,EAAQA,EAAMsB,QAAO,SAAApD,GAAI,OAAIA,EAAKG,aAkBhE,OACI,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAAS4B,IACvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BArCamB,EAAYP,KAAI,SAAA9C,GAAI,OACrC,kBAAC,EAAD,CACEsD,IAAKtD,EAAKa,GACVb,KAAMA,EACNC,iBAAmB,kBAAMwC,EAAmBzC,EAAKa,WAoC/C,0BAAM0C,SA5BI,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBrD,QAAS2B,EACTlB,MAAM,IAAI6C,MAAOC,cACjBzD,UAAW0D,KAAKC,SAAS,IAG5BvB,EACYmB,GACP3C,MAAK,SAAA8B,GACJd,EAASD,EAAMZ,OAAO2B,IACtBZ,EAAW,SAiBV,2BACI8B,MAAO/B,EACPgC,SApEa,SAACR,GACxBP,QAAQC,IAAIM,EAAMS,OAAOF,OACzB9B,EAAWuB,EAAMS,OAAOF,UAoElB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MCrGRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.63e2bd8e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important\n    ? 'make not important' : 'make important';\n\n  return (\n      <li className = 'note'>\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n      </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n      <div className=\"error\">\n        {message}\n      </div>\n  )\n};\n\nexport default Notification","import axios from 'axios'\n\nconst baseUrl = '/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  };\n  return request.then(response => response.data.concat(nonExisting))\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n};\n\nexport default {getAll, create, update}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteservice from './services/notes'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n      </div>\n  )\n}\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteservice\n        .getAll()\n        .then(initialNotes => {\n          setNotes(initialNotes)\n    })\n  }, []);\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changeNote = { ...note, important: !note.important }\n\n    noteservice\n        .update(id, changeNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(error => {\n          console.log(\"ERROR \",error);\n          setErrorMessage(\n              `Note \"${note.content}\" was already remover from server`\n          );\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000);\n        setNotes(notes.filter(n => n.id !== id))\n    })\n  };\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={ () => toggleImportanceOf(note.id)}\n    />\n  );\n\n\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random()>0.5,\n    };\n\n   noteservice\n       .create(noteObject)\n       .then(returnedNote => {\n         setNotes(notes.concat(returnedNote));\n         setNewNote('');\n   })\n  };\n\n  return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage}/>\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all' }\n          </button>\n        </div>\n        <ul>\n          {rows()}\n        </ul>\n        <form onSubmit={addNote}>\n          <input\n              value={newNote}\n              onChange={handleNoteChange}\n          />\n          <button type=\"submit\">save</button>\n        </form>\n        <Footer/>\n      </div>\n  )\n};\n\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}